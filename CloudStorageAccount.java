package com.microsoft.azure.storage;

import com.microsoft.azure.storage.analytics.CloudAnalyticsClient;
import com.microsoft.azure.storage.analytics.LogRecordStreamReader;
import com.microsoft.azure.storage.blob.CloudBlobClient;
import com.microsoft.azure.storage.core.SR;
import com.microsoft.azure.storage.core.SharedAccessSignatureHelper;
import com.microsoft.azure.storage.core.StorageCredentialsHelper;
import com.microsoft.azure.storage.core.Utility;
import com.microsoft.azure.storage.file.CloudFileClient;
import com.microsoft.azure.storage.queue.CloudQueueClient;
import com.microsoft.azure.storage.table.CloudTableClient;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public final class CloudStorageAccount {
    public static final String ACCOUNT_KEY_NAME = "AccountKey";
    public static final String ACCOUNT_NAME_NAME = "AccountName";
    public static final String ACCOUNT_TOKEN_NAME = "AccountToken";
    public static final String BLOB_ENDPOINT_NAME = "BlobEndpoint";
    public static final String BLOB_SECONDARY_ENDPOINT_NAME = "BlobSecondaryEndpoint";
    public static final String DEFAULT_DNS = "core.windows.net";
    public static final String DEFAULT_ENDPOINTS_PROTOCOL_NAME = "DefaultEndpointsProtocol";
    public static final String DEVELOPMENT_STORAGE_PRIMARY_ENDPOINT_FORMAT = "%s://%s:%s/%s";
    public static final String DEVELOPMENT_STORAGE_PROXY_URI_NAME = "DevelopmentStorageProxyUri";
    public static final String DEVELOPMENT_STORAGE_SECONDARY_ENDPOINT_FORMAT = "%s://%s:%s/%s-secondary";
    public static final String DEVSTORE_ACCOUNT_KEY = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==";
    public static final String DEVSTORE_ACCOUNT_NAME = "devstoreaccount1";
    public static final String DNS_NAME_FORMAT = "%s.%s";
    public static final String ENDPOINT_SUFFIX_NAME = "EndpointSuffix";
    public static final String FILE_ENDPOINT_NAME = "FileEndpoint";
    public static final String FILE_SECONDARY_ENDPOINT_NAME = "FileSecondaryEndpoint";
    public static final String PRIMARY_ENDPOINT_FORMAT = "%s://%s.%s";
    public static final String QUEUE_ENDPOINT_NAME = "QueueEndpoint";
    public static final String QUEUE_SECONDARY_ENDPOINT_NAME = "QueueSecondaryEndpoint";
    public static final String SECONDARY_ENDPOINT_FORMAT = "%s://%s%s.%s";
    public static final String SECONDARY_LOCATION_ACCOUNT_SUFFIX = "-secondary";
    public static final String SHARED_ACCESS_SIGNATURE_NAME = "SharedAccessSignature";
    public static final String TABLE_ENDPOINT_NAME = "TableEndpoint";
    public static final String TABLE_SECONDARY_ENDPOINT_NAME = "TableSecondaryEndpoint";
    public static final String USE_DEVELOPMENT_STORAGE_NAME = "UseDevelopmentStorage";
    public static ConnectionStringFilter validCredentials = matchesOne(matchesAll(allRequired(ACCOUNT_NAME_NAME, ACCOUNT_KEY_NAME), none("SharedAccessSignature")), matchesAll(allRequired("SharedAccessSignature"), optional(ACCOUNT_NAME_NAME), none(ACCOUNT_KEY_NAME)), none(ACCOUNT_NAME_NAME, ACCOUNT_KEY_NAME, "SharedAccessSignature"));
    public String accountName;
    public final StorageUri blobStorageUri;
    public StorageCredentials credentials;
    public String endpointSuffix;
    public final StorageUri fileStorageUri;
    public boolean isBlobEndpointDefault;
    public boolean isDevStoreAccount;
    public boolean isFileEndpointDefault;
    public boolean isQueueEndpointDefault;
    public boolean isTableEndpointDefault;
    public final StorageUri queueStorageUri;
    public final StorageUri tableStorageUri;

    public interface ConnectionStringFilter {
        Map<String, String> apply(Map<String, String> map);
    }

    public CloudStorageAccount(StorageCredentials storageCredentials) {
        this(storageCredentials, false, (String) null);
    }

    public static ConnectionStringFilter allRequired(final String... strArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                HashMap hashMap = new HashMap(map);
                for (String str : strArr) {
                    if (!hashMap.containsKey(str)) {
                        return null;
                    }
                    hashMap.remove(str);
                }
                return hashMap;
            }
        };
    }

    public static ConnectionStringFilter atLeastOne(final String... strArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                HashMap hashMap = new HashMap(map);
                Boolean bool = false;
                for (String str : strArr) {
                    if (hashMap.containsKey(str)) {
                        hashMap.remove(str);
                        bool = true;
                    }
                }
                if (bool.booleanValue()) {
                    return hashMap;
                }
                return null;
            }
        };
    }

    public static String getDNS(String str, String str2) {
        if (str2 == null) {
            str2 = DEFAULT_DNS;
        }
        return String.format(DNS_NAME_FORMAT, new Object[]{str, str2});
    }

    public static StorageUri getDefaultStorageUri(String str, String str2, String str3) {
        if (Utility.isNullOrEmpty(str)) {
            throw new IllegalArgumentException(SR.SCHEME_NULL_OR_EMPTY);
        } else if (!Utility.isNullOrEmpty(str2)) {
            return new StorageUri(new URI(String.format(PRIMARY_ENDPOINT_FORMAT, new Object[]{str, str2, str3})), new URI(String.format(SECONDARY_ENDPOINT_FORMAT, new Object[]{str, str2, SECONDARY_LOCATION_ACCOUNT_SUFFIX, str3})));
        } else {
            throw new IllegalArgumentException(SR.ACCOUNT_NAME_NULL_OR_EMPTY);
        }
    }

    public static CloudStorageAccount getDevelopmentStorageAccount() {
        try {
            return getDevelopmentStorageAccount((URI) null);
        } catch (URISyntaxException unused) {
            return null;
        }
    }

    public static StorageUri getStorageUri(Map<String, String> map, String str, String str2, String str3, Boolean bool) {
        String str4 = settingOrDefault(map, str2);
        String str5 = settingOrDefault(map, str3);
        if (str5 != null && str4 != null) {
            return new StorageUri(new URI(str4), new URI(str5));
        }
        if (str4 != null) {
            return new StorageUri(new URI(str4));
        }
        if (bool.booleanValue()) {
            return getDefaultStorageUri(map.get(DEFAULT_ENDPOINTS_PROTOCOL_NAME), map.get(ACCOUNT_NAME_NAME), getDNS(str, map.get(ENDPOINT_SUFFIX_NAME)));
        }
        return null;
    }

    public static Boolean isValidEndpointPair(String str, String str2) {
        return Boolean.valueOf(str != null || str2 == null);
    }

    public static ConnectionStringFilter matchesAll(final ConnectionStringFilter... connectionStringFilterArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                Map<String, String> hashMap = new HashMap<>(map);
                for (ConnectionStringFilter connectionStringFilter : connectionStringFilterArr) {
                    if (hashMap == null) {
                        break;
                    }
                    hashMap = connectionStringFilter.apply(hashMap);
                }
                return hashMap;
            }
        };
    }

    public static ConnectionStringFilter matchesExactly(final ConnectionStringFilter connectionStringFilter) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                Map<String, String> apply = connectionStringFilter.apply(new HashMap(map));
                if (apply == null || !apply.isEmpty()) {
                    return null;
                }
                return apply;
            }
        };
    }

    public static ConnectionStringFilter matchesOne(final ConnectionStringFilter... connectionStringFilterArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                Map<String, String> map2 = null;
                for (ConnectionStringFilter apply : connectionStringFilterArr) {
                    Map<String, String> apply2 = apply.apply(new HashMap(map));
                    if (apply2 != null) {
                        if (map2 != null) {
                            return null;
                        }
                        map2 = apply2;
                    }
                }
                return map2;
            }
        };
    }

    public static Boolean matchesSpecification(Map<String, String> map, ConnectionStringFilter... connectionStringFilterArr) {
        for (ConnectionStringFilter apply : connectionStringFilterArr) {
            map = apply.apply(map);
            if (map == null) {
                return false;
            }
        }
        if (map.isEmpty()) {
            return true;
        }
        return false;
    }

    public static ConnectionStringFilter none(final String... strArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                HashMap hashMap = new HashMap(map);
                Boolean bool = false;
                for (String str : strArr) {
                    if (hashMap.containsKey(str)) {
                        hashMap.remove(str);
                        bool = true;
                    }
                }
                if (bool.booleanValue()) {
                    return null;
                }
                return hashMap;
            }
        };
    }

    public static ConnectionStringFilter optional(final String... strArr) {
        return new ConnectionStringFilter() {
            public Map<String, String> apply(Map<String, String> map) {
                HashMap hashMap = new HashMap(map);
                for (String str : strArr) {
                    if (hashMap.containsKey(str)) {
                        hashMap.remove(str);
                    }
                }
                return hashMap;
            }
        };
    }

    /* JADX WARNING: Removed duplicated region for block: B:7:0x001c  */
    public static CloudStorageAccount parse(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException(SR.INVALID_CONNECTION_STRING);
        }
        HashMap<String, String> parseAccountString = Utility.parseAccountString(str);
        for (Map.Entry next : parseAccountString.entrySet()) {
            if (next.getValue() == null || ((String) next.getValue()).equals("")) {
                throw new IllegalArgumentException(SR.INVALID_CONNECTION_STRING);
            }
            while (r1.hasNext()) {
            }
        }
        CloudStorageAccount tryConfigureDevStore = tryConfigureDevStore(parseAccountString);
        if (tryConfigureDevStore != null) {
            return tryConfigureDevStore;
        }
        CloudStorageAccount tryConfigureServiceAccount = tryConfigureServiceAccount(parseAccountString);
        if (tryConfigureServiceAccount != null) {
            return tryConfigureServiceAccount;
        }
        throw new IllegalArgumentException(SR.INVALID_CONNECTION_STRING);
    }

    public static String settingOrDefault(Map<String, String> map, String str) {
        if (map.containsKey(str)) {
            return map.get(str);
        }
        return null;
    }

    public static CloudStorageAccount tryConfigureDevStore(Map<String, String> map) {
        URI uri = null;
        if (!matchesSpecification(map, allRequired(USE_DEVELOPMENT_STORAGE_NAME), optional(DEVELOPMENT_STORAGE_PROXY_URI_NAME)).booleanValue()) {
            return null;
        }
        if (Boolean.parseBoolean(map.get(USE_DEVELOPMENT_STORAGE_NAME))) {
            if (map.containsKey(DEVELOPMENT_STORAGE_PROXY_URI_NAME)) {
                uri = new URI(map.get(DEVELOPMENT_STORAGE_PROXY_URI_NAME));
            }
            return getDevelopmentStorageAccount(uri);
        }
        throw new IllegalArgumentException(SR.INVALID_CONNECTION_STRING_DEV_STORE_NOT_TRUE);
    }

    public static CloudStorageAccount tryConfigureServiceAccount(Map<String, String> map) {
        Map<String, String> map2 = map;
        ConnectionStringFilter optional = optional(BLOB_ENDPOINT_NAME, BLOB_SECONDARY_ENDPOINT_NAME, QUEUE_ENDPOINT_NAME, QUEUE_SECONDARY_ENDPOINT_NAME, TABLE_ENDPOINT_NAME, TABLE_SECONDARY_ENDPOINT_NAME, FILE_ENDPOINT_NAME, FILE_SECONDARY_ENDPOINT_NAME);
        ConnectionStringFilter atLeastOne = atLeastOne(BLOB_ENDPOINT_NAME, QUEUE_ENDPOINT_NAME, TABLE_ENDPOINT_NAME, FILE_ENDPOINT_NAME);
        ConnectionStringFilter optional2 = optional(BLOB_SECONDARY_ENDPOINT_NAME, QUEUE_SECONDARY_ENDPOINT_NAME, TABLE_SECONDARY_ENDPOINT_NAME, FILE_SECONDARY_ENDPOINT_NAME);
        ConnectionStringFilter matchesExactly = matchesExactly(matchesAll(matchesOne(matchesAll(allRequired(ACCOUNT_KEY_NAME)), allRequired("SharedAccessSignature")), allRequired(ACCOUNT_NAME_NAME), optional, optional(DEFAULT_ENDPOINTS_PROTOCOL_NAME, ENDPOINT_SUFFIX_NAME)));
        String str = ACCOUNT_NAME_NAME;
        ConnectionStringFilter matchesExactly2 = matchesExactly(matchesAll(validCredentials, atLeastOne, optional2));
        Boolean matchesSpecification = matchesSpecification(map2, matchesExactly);
        Boolean matchesSpecification2 = matchesSpecification(map2, matchesExactly2);
        if (!matchesSpecification.booleanValue() && !matchesSpecification2.booleanValue()) {
            return null;
        }
        if (matchesSpecification.booleanValue() && !map2.containsKey(DEFAULT_ENDPOINTS_PROTOCOL_NAME)) {
            map2.put(DEFAULT_ENDPOINTS_PROTOCOL_NAME, "https");
        }
        String str2 = settingOrDefault(map2, BLOB_ENDPOINT_NAME);
        String str3 = settingOrDefault(map2, QUEUE_ENDPOINT_NAME);
        String str4 = settingOrDefault(map2, TABLE_ENDPOINT_NAME);
        String str5 = settingOrDefault(map2, FILE_ENDPOINT_NAME);
        String str6 = settingOrDefault(map2, BLOB_SECONDARY_ENDPOINT_NAME);
        String str7 = ENDPOINT_SUFFIX_NAME;
        String str8 = settingOrDefault(map2, QUEUE_SECONDARY_ENDPOINT_NAME);
        String str9 = FILE_ENDPOINT_NAME;
        String str10 = settingOrDefault(map2, TABLE_SECONDARY_ENDPOINT_NAME);
        String str11 = TABLE_ENDPOINT_NAME;
        String str12 = settingOrDefault(map2, FILE_SECONDARY_ENDPOINT_NAME);
        if (!isValidEndpointPair(str2, str6).booleanValue() || !isValidEndpointPair(str3, str8).booleanValue() || !isValidEndpointPair(str4, str10).booleanValue() || !isValidEndpointPair(str5, str12).booleanValue()) {
            return null;
        }
        CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(StorageCredentials.tryParseCredentials(map), getStorageUri(map2, SR.BLOB, BLOB_ENDPOINT_NAME, BLOB_SECONDARY_ENDPOINT_NAME, matchesSpecification), getStorageUri(map2, SR.QUEUE, QUEUE_ENDPOINT_NAME, QUEUE_SECONDARY_ENDPOINT_NAME, matchesSpecification), getStorageUri(map2, SR.TABLE, str11, TABLE_SECONDARY_ENDPOINT_NAME, matchesSpecification), getStorageUri(map2, SR.FILE, str9, FILE_SECONDARY_ENDPOINT_NAME, matchesSpecification));
        cloudStorageAccount.isBlobEndpointDefault = str2 == null;
        cloudStorageAccount.isFileEndpointDefault = str5 == null;
        cloudStorageAccount.isQueueEndpointDefault = str3 == null;
        cloudStorageAccount.isTableEndpointDefault = str4 == null;
        cloudStorageAccount.endpointSuffix = settingOrDefault(map2, str7);
        cloudStorageAccount.accountName = settingOrDefault(map2, str);
        return cloudStorageAccount;
    }

    public CloudAnalyticsClient createCloudAnalyticsClient() {
        if (getBlobStorageUri() == null) {
            throw new IllegalArgumentException(SR.BLOB_ENDPOINT_NOT_CONFIGURED);
        } else if (getTableStorageUri() == null) {
            throw new IllegalArgumentException(SR.TABLE_ENDPOINT_NOT_CONFIGURED);
        } else if (this.credentials != null) {
            return new CloudAnalyticsClient(getBlobStorageUri(), getTableStorageUri(), getCredentials());
        } else {
            throw new IllegalArgumentException(SR.MISSING_CREDENTIALS);
        }
    }

    public CloudBlobClient createCloudBlobClient() {
        if (getBlobStorageUri() == null) {
            throw new IllegalArgumentException(SR.BLOB_ENDPOINT_NOT_CONFIGURED);
        } else if (this.credentials != null) {
            return new CloudBlobClient(getBlobStorageUri(), getCredentials());
        } else {
            throw new IllegalArgumentException(SR.MISSING_CREDENTIALS);
        }
    }

    public CloudFileClient createCloudFileClient() {
        if (getFileStorageUri() != null) {
            StorageCredentials storageCredentials = this.credentials;
            if (storageCredentials == null) {
                throw new IllegalArgumentException(SR.MISSING_CREDENTIALS);
            } else if (StorageCredentialsHelper.canCredentialsGenerateClient(storageCredentials)) {
                return new CloudFileClient(getFileStorageUri(), getCredentials());
            } else {
                throw new IllegalArgumentException(SR.CREDENTIALS_CANNOT_SIGN_REQUEST);
            }
        } else {
            throw new IllegalArgumentException(SR.FILE_ENDPOINT_NOT_CONFIGURED);
        }
    }

    public CloudQueueClient createCloudQueueClient() {
        if (getQueueStorageUri() != null) {
            StorageCredentials storageCredentials = this.credentials;
            if (storageCredentials == null) {
                throw new IllegalArgumentException(SR.MISSING_CREDENTIALS);
            } else if (StorageCredentialsHelper.canCredentialsGenerateClient(storageCredentials)) {
                return new CloudQueueClient(getQueueStorageUri(), getCredentials());
            } else {
                throw new IllegalArgumentException(SR.CREDENTIALS_CANNOT_SIGN_REQUEST);
            }
        } else {
            throw new IllegalArgumentException(SR.QUEUE_ENDPOINT_NOT_CONFIGURED);
        }
    }

    public CloudTableClient createCloudTableClient() {
        if (getTableStorageUri() != null) {
            StorageCredentials storageCredentials = this.credentials;
            if (storageCredentials == null) {
                throw new IllegalArgumentException(SR.MISSING_CREDENTIALS);
            } else if (StorageCredentialsHelper.canCredentialsGenerateClient(storageCredentials)) {
                return new CloudTableClient(getTableStorageUri(), getCredentials());
            } else {
                throw new IllegalArgumentException(SR.CREDENTIALS_CANNOT_SIGN_REQUEST);
            }
        } else {
            throw new IllegalArgumentException(SR.TABLE_ENDPOINT_NOT_CONFIGURED);
        }
    }

    public String generateSharedAccessSignature(SharedAccessAccountPolicy sharedAccessAccountPolicy) {
        if (StorageCredentialsHelper.canCredentialsSignRequest(getCredentials())) {
            return SharedAccessSignatureHelper.generateSharedAccessSignatureForAccount(sharedAccessAccountPolicy, SharedAccessSignatureHelper.generateSharedAccessSignatureHashForAccount(this.credentials.getAccountName(), sharedAccessAccountPolicy, getCredentials())).toString();
        }
        throw new IllegalArgumentException(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);
    }

    public URI getBlobEndpoint() {
        StorageUri storageUri = this.blobStorageUri;
        if (storageUri == null) {
            return null;
        }
        return storageUri.getPrimaryUri();
    }

    public StorageUri getBlobStorageUri() {
        return this.blobStorageUri;
    }

    public StorageCredentials getCredentials() {
        return this.credentials;
    }

    public String getEndpointSuffix() {
        return this.endpointSuffix;
    }

    public URI getFileEndpoint() {
        StorageUri storageUri = this.fileStorageUri;
        if (storageUri == null) {
            return null;
        }
        return storageUri.getPrimaryUri();
    }

    public StorageUri getFileStorageUri() {
        return this.fileStorageUri;
    }

    public URI getQueueEndpoint() {
        StorageUri storageUri = this.queueStorageUri;
        if (storageUri == null) {
            return null;
        }
        return storageUri.getPrimaryUri();
    }

    public StorageUri getQueueStorageUri() {
        return this.queueStorageUri;
    }

    public URI getTableEndpoint() {
        StorageUri storageUri = this.tableStorageUri;
        if (storageUri == null) {
            return null;
        }
        return storageUri.getPrimaryUri();
    }

    public StorageUri getTableStorageUri() {
        return this.tableStorageUri;
    }

    public void setCredentials(StorageCredentials storageCredentials) {
        this.credentials = storageCredentials;
    }

    public String toString() {
        return toString(false);
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, boolean z) {
        this(storageCredentials, z, (String) null);
    }

    public static CloudStorageAccount getDevelopmentStorageAccount(URI uri) {
        String str;
        String str2;
        if (uri == null) {
            str2 = "http";
            str = "127.0.0.1";
        } else {
            str2 = uri.getScheme();
            str = uri.getHost();
        }
        StorageCredentialsAccountAndKey storageCredentialsAccountAndKey = new StorageCredentialsAccountAndKey(DEVSTORE_ACCOUNT_NAME, DEVSTORE_ACCOUNT_KEY);
        URI uri2 = new URI(String.format(DEVELOPMENT_STORAGE_PRIMARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10000", DEVSTORE_ACCOUNT_NAME}));
        URI uri3 = new URI(String.format(DEVELOPMENT_STORAGE_PRIMARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10001", DEVSTORE_ACCOUNT_NAME}));
        URI uri4 = new URI(String.format(DEVELOPMENT_STORAGE_PRIMARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10002", DEVSTORE_ACCOUNT_NAME}));
        URI uri5 = new URI(String.format(DEVELOPMENT_STORAGE_SECONDARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10000", DEVSTORE_ACCOUNT_NAME}));
        URI uri6 = new URI(String.format(DEVELOPMENT_STORAGE_SECONDARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10001", DEVSTORE_ACCOUNT_NAME}));
        URI uri7 = new URI(String.format(DEVELOPMENT_STORAGE_SECONDARY_ENDPOINT_FORMAT, new Object[]{str2, str, "10002", DEVSTORE_ACCOUNT_NAME}));
        CloudStorageAccount cloudStorageAccount = new CloudStorageAccount((StorageCredentials) storageCredentialsAccountAndKey, new StorageUri(uri2, uri5), new StorageUri(uri3, uri6), new StorageUri(uri4, uri7), (StorageUri) null);
        cloudStorageAccount.isDevStoreAccount = true;
        return cloudStorageAccount;
    }

    /* JADX WARNING: Removed duplicated region for block: B:17:0x008c  */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x00ab  */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x00ca  */
    /* JADX WARNING: Removed duplicated region for block: B:34:0x00e5  */
    /* JADX WARNING: Removed duplicated region for block: B:37:0x0102  */
    public String toString(boolean z) {
        boolean z2;
        ArrayList arrayList = new ArrayList();
        if (this.isDevStoreAccount) {
            arrayList.add(String.format("%s=true", new Object[]{USE_DEVELOPMENT_STORAGE_NAME}));
            if (!getBlobEndpoint().toString().equals("http://127.0.0.1:10000/devstoreaccount1")) {
                arrayList.add(String.format("%s=%s://%s/", new Object[]{DEVELOPMENT_STORAGE_PROXY_URI_NAME, getBlobEndpoint().getScheme(), getBlobEndpoint().getHost()}));
            }
        } else {
            String str = this.endpointSuffix;
            if (str != null) {
                arrayList.add(String.format("%s=%s", new Object[]{ENDPOINT_SUFFIX_NAME, str}));
            }
            if (getBlobStorageUri() != null) {
                if (this.isBlobEndpointDefault) {
                    z2 = true;
                    if (getQueueStorageUri() != null) {
                        if (this.isQueueEndpointDefault) {
                            z2 = true;
                        } else {
                            arrayList.add(String.format("%s=%s", new Object[]{QUEUE_ENDPOINT_NAME, getQueueEndpoint()}));
                        }
                    }
                    if (getTableStorageUri() != null) {
                        if (this.isTableEndpointDefault) {
                            z2 = true;
                        } else {
                            arrayList.add(String.format("%s=%s", new Object[]{TABLE_ENDPOINT_NAME, getTableEndpoint()}));
                        }
                    }
                    if (getFileStorageUri() != null) {
                        if (this.isFileEndpointDefault) {
                            z2 = true;
                        } else {
                            arrayList.add(String.format("%s=%s", new Object[]{FILE_ENDPOINT_NAME, getFileEndpoint()}));
                        }
                    }
                    if (z2) {
                        arrayList.add(String.format("%s=%s", new Object[]{DEFAULT_ENDPOINTS_PROTOCOL_NAME, getBlobEndpoint().getScheme()}));
                    }
                    if (getCredentials() != null) {
                        arrayList.add(getCredentials().toString(z));
                    }
                    if (this.accountName != null && (getCredentials() == null || getCredentials().getAccountName() == null)) {
                        arrayList.add(String.format("%s=%s", new Object[]{ACCOUNT_NAME_NAME, this.accountName}));
                    }
                } else {
                    arrayList.add(String.format("%s=%s", new Object[]{BLOB_ENDPOINT_NAME, getBlobEndpoint()}));
                }
            }
            z2 = false;
            if (getQueueStorageUri() != null) {
            }
            if (getTableStorageUri() != null) {
            }
            if (getFileStorageUri() != null) {
            }
            if (z2) {
            }
            if (getCredentials() != null) {
            }
            arrayList.add(String.format("%s=%s", new Object[]{ACCOUNT_NAME_NAME, this.accountName}));
        }
        StringBuilder sb = new StringBuilder();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            sb.append((String) it.next());
            sb.append(LogRecordStreamReader.FIELD_DELIMITER);
        }
        if (arrayList.size() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }
        return sb.toString();
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, boolean z, String str) {
        this(storageCredentials, z, str, (String) null);
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, boolean z, String str, String str2) {
        this.isBlobEndpointDefault = false;
        this.isFileEndpointDefault = false;
        this.isQueueEndpointDefault = false;
        this.isTableEndpointDefault = false;
        this.isDevStoreAccount = false;
        Utility.assertNotNull("storageCredentials", storageCredentials);
        if (Utility.isNullOrEmpty(str2)) {
            str2 = storageCredentials.getAccountName();
        } else if (!Utility.isNullOrEmpty(storageCredentials.getAccountName()) && !str2.equals(storageCredentials.getAccountName())) {
            throw new IllegalArgumentException(SR.ACCOUNT_NAME_MISMATCH);
        }
        String str3 = z ? "https" : "http";
        this.credentials = storageCredentials;
        this.blobStorageUri = getDefaultStorageUri(str3, str2, getDNS(SR.BLOB, str));
        this.fileStorageUri = getDefaultStorageUri(str3, str2, getDNS(SR.FILE, str));
        this.queueStorageUri = getDefaultStorageUri(str3, str2, getDNS(SR.QUEUE, str));
        this.tableStorageUri = getDefaultStorageUri(str3, str2, getDNS(SR.TABLE, str));
        this.endpointSuffix = str;
        this.isBlobEndpointDefault = true;
        this.isFileEndpointDefault = true;
        this.isQueueEndpointDefault = true;
        this.isTableEndpointDefault = true;
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, URI uri, URI uri2, URI uri3) {
        this(storageCredentials, new StorageUri(uri), new StorageUri(uri2), new StorageUri(uri3), (StorageUri) null);
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, URI uri, URI uri2, URI uri3, URI uri4) {
        this(storageCredentials, new StorageUri(uri), new StorageUri(uri2), new StorageUri(uri3), new StorageUri(uri4));
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, StorageUri storageUri, StorageUri storageUri2, StorageUri storageUri3) {
        this(storageCredentials, storageUri, storageUri2, storageUri3, (StorageUri) null);
    }

    public CloudStorageAccount(StorageCredentials storageCredentials, StorageUri storageUri, StorageUri storageUri2, StorageUri storageUri3, StorageUri storageUri4) {
        this.isBlobEndpointDefault = false;
        this.isFileEndpointDefault = false;
        this.isQueueEndpointDefault = false;
        this.isTableEndpointDefault = false;
        this.isDevStoreAccount = false;
        this.credentials = storageCredentials;
        this.blobStorageUri = storageUri;
        this.fileStorageUri = storageUri4;
        this.queueStorageUri = storageUri2;
        this.tableStorageUri = storageUri3;
        this.endpointSuffix = null;
    }
}
